=basic apply=

apply(X, MARGIN, FUN, ...)

# e.g. Construct a 5x6 matrix
X <- matrix(rnorm(30), nrow=5, ncol=6)
# Sum the values of each column with `apply()`
apply(X, 2, sum)

# Add extra arguments to the function with a comma.
# (e.g. if you want to run median(x, na.rm=TRUE), then:
medianVals = apply( data_someFinite, 2, median, na.rm=TRUE )


ModeB <- function( x ){
  Srt_table <- as.numeric( rownames( sort( table( x ), decreasing=T) ) )

  result=ifelse( Srt_table[1]==0, Srt_table[2], Srt_table[1])

  return( result )
}
ModeCov=apply( Cov2, 2, ModeB )



lapply will also insert a list into the first place where it can 
> testfunc <- function( a, b, c){
  result = paste0( "a=", as.character(a),
                   ", b=", as.character(b),
                   ", c=", as.character(c) )
  return(result)
}
> xarray=c(10,20)
> lapply( xarray, testfunc, a=1, c=3 )
[[1]]
[1] "a=1, b=10, c=3"

[[2]]
[1] "a=1, b=20, c=3"

=lapply -- lists =

lapply( list, function(x)  [some operation on x as x goes through each member of the list](x) )
# returns a list

# sapply returns a vector


= convert to matrix/dataframe with dplyer =
library(dplyr)
lapply(my_vector, my_function) %>% bind_rows()



see: https://stackoverflow.com/questions/28657690/how-to-combine-result-of-lapply-to-a-data-frame
