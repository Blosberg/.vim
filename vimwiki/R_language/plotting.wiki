=basic plot =
plot( x, y,
      log="xy",
      col=rgb(0,0,1,alpha), pch=20,
      xlim=c(1,maxcov), ylim=c(1,maxcov),
      xlab="x-axis",
      ylab="y-axis",
      lwd=3, # Make lines thicker
#       col.lab="green",
#       cex.lab=0.75
#
      main="title"
#     , col.main ="red",
#       sub = "subtitle, col.sub="blue",
#
# )

# add points on top:
points(mCfrac_E145[,"DKO"],  pch=5, lwd=3, col="red" )

= bar plot =

lengths = c(3200000000, 140000000 , 100000000,  12000000)
names(lengths) = c("human", 'fly', 'worm',  'yeast' )

barplot( lengths,                                       # Horizontal barchart
#         space=c(0,0,0),
         width=c(0.1,0.1,0.1, 0.1),
         horiz = TRUE,
         xlab  = "bp",
         las=1,
         main  = "Genome Length")

= plot to file =
  png( paste0( path_out,
                "/",
                 "ExampleFig",
                 ".png") )
  plot( ...)
  dev.off()

= heat map =

#=======================
# Can't quite get this working properly, but here's the best notes I have so far:
# Generate some data
test = matrix(rnorm(200), 20, 10)
test[1:10, seq(1, 10, 2)] = test[1:10, seq(1, 10, 2)] + 3
test[11:20, seq(2, 10, 2)] = test[11:20, seq(2, 10, 2)] + 2
test[15:20, seq(2, 10, 2)] = test[15:20, seq(2, 10, 2)] + 4
colnames(test) = paste("Test", 1:10, sep = "")
rownames(test) = paste("Gene", 1:20, sep = "")
# original figure
pheatmap(test)

# Add annotation as described above, and change the name of annotation
annotation <- data.frame(Var1 = factor(1:10 %% 2 == 0, labels = c("Exp1", "Exp2")))
rownames(annotation) <- colnames(test) # check out the row names of annotation
pheatmap(test, annotation = annotation, cluster_cols = FALSE)

# change the color of annotation to what you want: (eg: "navy", "darkgreen")
Var1        <- c("navy", "darkgreen")
names(Var1) <- c("Exp1", "Exp2")
anno_colors <- list(Var1 = Var1)
pheatmap(test, annotation = annotation, annotation_colors = anno_colors)

Also check out complex heat map package:
https://jokergoo.github.io/ComplexHeatmap-reference/book/introduction.html

= ideogram (along chrosomes, etc.) =

require(RIdeogram)
library(stringr)
# using
# human_karyotype
# as a template from the following:
# data(human_karyotype, package="RIdeogram")
# https://cran.r-project.org/web/packages/RIdeogram/vignettes/RIdeogram.html

Killi_karyo=data.frame( cbind( seq(1,19) , 0 )  )
colnames( Killi_karyo ) <- c("Chr", "Start")
sizes=read.table("NFZv2IuN_canon.chrom.sizes",sep="\t")
Killi_karyo$End=sizes[,2]

CGImap=read.table("cgiMap.bed", sep="\t", header = TRUE )
CGImap$Chr= as.numeric( str_replace( CGImap$Chr, "chr", ""  ))

#ideogram( karyotype = Killi_karyo, overlaid = gene_density)
ideogram( karyotype = Killi_karyo,
          overlaid = CGImap,
          colorset1 = rgb(0,0,1),
          output = "Furz_cgiMap_Heat.svg")
convertSVG("Furz_cgiMap_Heat.svg", device = "png")

ideogram( karyotype = Killi_karyo,
          label = CGImap,
          label_type = "marker",
          colorset1 = rgb(0,0,1),
          #output = "Furz_cgiMap_symbol.svg"
          )
convertSVG( "chromosome.svg", device = "png")


= add legend =
legend( 3.0,
        0.1,
	legend=c("E14.5-CreCtrl", "E14.5-DKO", "E13.5-CreCtrl", "E13.5-DKO"),
	col=c("black", "red", "blue","green"),
	pch=c(1,5,6,7),
	lty=1:2,
	cex=1.0,
	lwd=3 )

= label specific points =

# After plotting:
text ( x= xpos, y=ypos, labels=labels )

= Set custom tic marks =
plot(...,
     xaxt="n",
     )

axis(1,                         # Define x-axis manually, y=2
     at = 1:5,                  # positions
     labels = row.names( mCfrac_E145 ) ) # labels


= multiple plots, mfrow par =

par(mfrow=c(1,2))    # set the plotting area into a 1*2 array

= hist : transparent histograms =

  breaks_in=100
  hist_a=hist( dat_a, plot = FALSE,
               breaks = breaks_in )
  hist_b=hist( dat_b, plot = FALSE,
               breaks = breaks_in )

    plot(  c(min(hist_b$mids), hist_b$mids, max(hist_b$mids) ),
           c(0, hist_b$density, 0),
           type="l",
           lwd=1,
           lty  = "blank",
           col  = adjustcolor(color_in, alpha.f = 0.3),
           xlab  = "width [nt]",
           ylab  = "dens",
           main  = paste("HyperCGI widths [log]"),
           ylim=c(0,1)
           )

    polygon( c( min(hist_a$mids),
                hist_a$mids,
                max(hist_a$mids)),
            c(0, hist_a$density, 0),
            lty  ="blank",
            col  = adjustcolor(color_in, alpha.f = 0.6) )
    polygon( c( min(hist_b$mids),
                hist_b$mids,
                max(hist_b$mids)),
             c(0, hist_b$density, 0),
             lty  ="blank",
             col  = adjustcolor("blue", alpha.f = 0.6) )


legend( 2.7, 1.8,
        inset  = 0.2,
        legend = c("red data", "blue data"),
        cex=0.8,
        lty=NULL,
        fill = c( "red", "blue" ),
        box.lwd=1
)



==Too much data to plot at once: smoothScatter==
smoothScatter( bigdatX, bigdatY,
               xlim=c(1,maxlogcov), ylim=c(1,maxlogcov),
               xlab="xax", ylab="yax",
               main="title")


= Add stuff after plotting. =
# Add a red title and a blue subtitle. Make x and y
# labels 25% smaller than the default and green.
title(main="My Title", col.main="red",
  sub="My Sub-title", col.sub="blue",
  xlab="My X label", ylab="My Y label",
  col.lab="green", cex.lab=0.75)

= add lines =
# line type (lty) can be specified using either text (“blank”, “solid”,
# “dashed”, “dotted”, “dotdash”, “longdash”, “twodash”) or number (0, 1, 2, 3,
# 4, 5, 6). Note that lty = “solid” is identical to lty=1.

         lines( c(0,1),
               c(0,1),
               lty = 2,              # 2 = dashed
               lwd = 3,              # linewidth
               col=rgb(0,0,0,0.5))   # r,g,b,alpha=opacity





