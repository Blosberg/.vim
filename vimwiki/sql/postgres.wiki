= backup/ restore: =

==  Create backups  ==

pg_dump  --file [target file out]         \
         --host [IPaddress or link]       \
         --port [port]                    \
         --username [username]            \
         --no-password                    \
         --verbose                        \
         --format=c                       \
         --blobs                          \
         --section=pre-data               \
         --section=data                   \
         --section=post-data
	 -d  "[database_name]"

==  Restore from backup  ==

# issues with permissions:
https://stackoverflow.com/questions/37271402/pg-restore-error-role-xxx-does-not-exist

[on local machine]:
pg_restore --no-privileges --no-owner -h localhost -p 5433 -U  postgres  -d  NPTB_May23Tests  Npath_TumorBank_postgres_lab_2023-05-18-0600.backup

# you can also automatically export the password:
$export PGPASSWORD=[password]
$pg_restore --no-password --no-privileges --no-owner -h localhost -p 5433 -U  postgres  -d test Npath_TumorBank_postgres_lab_2022-12-17-2314.backup

= interactive sessions =
# Connect as user postgress on port 5433
psql -U [username]  -p [port]  -h [hostname] -d [database_name]

# to terminate the session:
\q

# To view all of the defined databases on the server you can use the \list meta-command or its shortcut \l.
\l

# connect to a database with \c
\c test

# list tables with \dt
\dt

copy data from csv into db
 \copy sales FROM '/path/to/csv' WITH DELIMITER ',' CSV HEADER;
 COPY 4976

 # Start the server
pg_ctl --help
pg_ctl is a utility to initialize, start, stop, or control a PostgreSQL server.

# connect to it
psql postgres -p 5433 -U postgres
Password for user postgres:

# create a database (simple one from LL)
CREATE DATABASE red30;
CREATE DATABASE

# list databases:
\list
\l

# connect
\c red30
https://pypi.org/project/psycopg2/


= php =

# This package may be needed (e.g. for nextcloud) if you want postgres to interact with online stuff

sudo apt-get  install php8.0-pgsql

= Authentication issue =

When trying to access the DB, you might get this error:

SCRAM authentication requires libpq version 10 or above

SOLUTION:

FROM [[here]](https://stackoverflow.com/questions/62807717/how-can-i-solve-postgresql-scram-authentication-problem)


[1] set password_encryption = md5 in postgresql.conf
[2] change the authentication method to md5 in pg_hba.conf
[3] reload PostgreSQL

You can obtain the paths for each of these files from within postgres (as a query) --you can also make some changes within postgres:
[1]:
SHOW config_file;
-->  /Library/PostgreSQL/15/data/postgresql.conf

[2]:
SHOW hba_file;
--> /Library/PostgreSQL/15/data/pg_hba.conf

[3]:
SELECT pg_reload_conf();

[4]:
ALTER USER user_name WITH PASSWORD 'new_password';

