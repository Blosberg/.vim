
= Summary =
The BED format consists of one line per feature, each containing 3-12 columns of data, plus optional track definition lines.

 == Required fields ==

    chrom - name of the chromosome or scaffold. Any valid seq_region_name can be used, and chromosome names can be given with or without the 'chr' prefix.
    chromStart - Start position of the feature in standard chromosomal coordinates (i.e. first base is 0).
    chromEnd - End position of the feature in standard chromosomal coordinates

chr1  213941196  213942363
chr1  213942363  213943530

 == Optional fields ==
Nine additional fields are optional. Note that columns cannot be empty - lower-numbered fields must always be populated if higher-numbered ones are used.

    name - Label to be displayed under the feature, if turned on in "Configure this page".
    score - A score between 0 and 1000. See track lines, below, for ways to configure the display style of scored data.
    strand - defined as + (forward) or - (reverse).

    e.g.
    BED6: A BED file where each feature is described by chrom, start, end, name, score, and strand.
    For example:
    chr1 11873 14409 uc001aaa.3 0 +


    thickStart - coordinate at which to start drawing the feature as a solid rectangle
    thickEnd - coordinate at which to stop drawing the feature as a solid rectangle
    itemRgb - an RGB colour value (e.g. 0,0,255). Only used if there is a track line with the value of itemRgb set to "on" (case-insensitive).
    blockCount - the number of sub-elements (e.g. exons) within the feature
    blockSizes - the size of these sub-elements
    blockStarts - the start coordinate of each sub-element

Bedtools Read The docs:
[[https://bedtools.readthedocs.io/en/latest/content/general-usage.html|BedTools:ReadTheDocs]]

= Input examples =
# $cat  a.bed
chr1    100     200     2
chr1    150     250     3
chr1    160     260     4

# $cat  b.bed
chr1    101     102     0.1
chr1    150     151     0.2
chr1    165     166     0.3

= Convert bed to tsv =

awk '{printf "%s:%d-%d", $1,$2+1,$3}{ for(i=4; i<=NF; i++){ printf "\t%s",$i}; print ""}'  InFile.bed > OutFile.tsv

= Row-averaging =

# simple awk script to take row-averages, assuming missing filler text is NA
sed '1d' Input.bed | sed 's/NA//g' | awk '{sum = 0; for (i = 4; i <= NF; i++) sum += $i; sum /= (NF-3); print          $1"\t"$2"\t"$3"\t"sum}' > SampAvg_Canc.bed
# ^ strip header
#               ^ removing NAs entirely autmatically decrements NF
#                               ^ avg over elements 4..NF and print alongside position cols 1,2,3

= Union =

bedtools unionbedg -i a.bed b.bed -header -names A B -filler NA
chrom	start	end	A	B
chr1	100	101	2	NA
chr1	101	102	2	0.1
chr1	102	150	2	NA
chr1	150	151	2	0.2
chr1	151	165	2	NA
chr1	165	166	2	0.3
chr1	166	200	2	NA
chr1	200	250	NA	NA
chr1	250	260	NA	NA

= intersect =

-wa	Write the original entry in A for each overlap.
-wb     ""  "" for B
^ same entry can be repeated if it overlaps more than once.

-u	Write the original A entry _once_ if _any_ overlaps found in B.
		- In other words, just report the fact >=1 hit was found.
		- Overlaps restricted by -f and -r.

$ bedtools intersect -u  -a a.bed -b b.bed
chr1	100	200	2
chr1	150	250	3
chr1	160	260	4

= Groupby =

> bedtools intersect -a  arange -b tmpb_input.bed -g ${GenomeFai} -wo > tmp_intsct.bed
> bedtools intersect -a  arange -b tmpb_input.bed -g ${GenomeFai} -wo | head
chr1    3041000 3042000 chr1    3041583 3041584 1       1
chr1    3084000 3085000 chr1    3084110 3084111 1       1
chr1    3084000 3085000 chr1    3084835 3084836 1       1
chr1    3085000 3086000 chr1    3085408 3085409 1       1
chr1    3085000 3086000 chr1    3085417 3085418 1       1
chr1    3087000 3088000 chr1    3087431 3087432 1       1
chr1    3088000 3089000 chr1    3088123 3088124 1       1
chr1    3117000 3118000 chr1    3117520 3117521 1       1
chr1    3191000 3192000 chr1    3191499 3191500 0       1
chr1    3264000 3265000 chr1    3264042 3264043 1       1

[13:59]bosberg@folsomprisonblues:test/$bedtools groupby -i tmp_intsct.bed -g 1,2,3  -c 7,8 -o mean,sum | head
chr1    3041000 3042000 1       1
chr1    3084000 3085000 1       2
chr1    3085000 3086000 1       2
chr1    3087000 3088000 1       1
chr1    3088000 3089000 1       1
chr1    3117000 3118000 1       1
chr1    3191000 3192000 0       1
chr1    3264000 3265000 0.75    4
chr1    3288000 3289000 0.5     2
chr1    3299000 3300000 1       1

= flank (get just borders)  =
https://bedtools.readthedocs.io/en/latest/content/tools/flank.html

bedtools flank -s  -l  1500  -r 0   -i gencode.vm25.genes.sortLex.bed -g mm10_sortLex.chrom.sizes  > TSSupstream.bed
# ^s makes it stranded --but then you need the "+" in the right place . i.e. col 5:

chr1	3073252	3074322	ENSMUST00000193812.1_exon_0_0_chr1_3073253_f	0	+
chr1	3102015	3102125	ENSMUST00000082908.1_exon_0_0_chr1_3102016_f	0	+
chr1	3214481	3216968	ENSMUST00000070533.4_exon_0_0_chr1_3214482_r	0	-
chr1	3365730	3368549	ENSMUST00000195335.1_exon_0_0_chr1_3365731_r	0	-

= slop (add on borders)  =

https://bedtools.readthedocs.io/en/latest/content/tools/slop.html

bedtools slop  -s  -l  0     -r 500 -i TSSupstream.bed                -g mm10_sortLex.chrom.sizes  > gencode.vm25.promoter_l1500_r500.bed

= Map =
# -a =file to be mapped onto
# -b =data to take
# -c =column from file b to work with
# -o operation to be performed on that col
bedtools map -a ta.bed -b tb.bed -c 4 -o mean -null NA
chr1    100     200     2       0.2
chr1    150     250     3       0.25
chr1    160     260     4       0.3


bedfile_a      |      bedfile_b        |    output
---------------+------------------------------------------
               |  chr1  101 102  0.1  \
chr1  100  200 |  chr1  150 151  0.2   > chr1 100 200 0.2
               |  chr1  165 166  0.3  /
---------------+---------------------<
               |                      \
chr1  150  250 |  chr1  150 151  0.2   > chr1 150 250 0.25
               |  chr1  165 166  0.3  /
---------------+---------------------<
               |                      \
chr1  160  260 |  chr1  165 166  0.3   > chr1 160 260 0.3
               |                      /
---------------+---------------------<
chrX 100   200 |                      > NA
---------------+---------------------/



= Make windows =
# bins
bedtools makewindows -g NOR.chrom.sizes -w 200 -s 50 -i srcwinnum >NOR_w200_s50.bed
bedtools makewindows -g NFZ.chrom.sizes -w 200 -s 50 -i srcwinnum >NFZ_w200_s50.bed


= get fasta (extract features/sequences/etc. from fasta file in bed regions) =

$bedtools getfasta

Tool:    bedtools getfasta (aka fastaFromBed)
Version: v2.29.2
Summary: Extract DNA sequences from a fasta file based on feature coordinates.

Usage:   bedtools getfasta [OPTIONS] -fi <fasta> -bed <bed/gff/vcf>

Options:
        -fi             Input FASTA file
        -fo             Output file (opt., default is STDOUT
        -bed            BED/GFF/VCF file of ranges to extract from -fi
        -name           Use the name field and coordinates for the FASTA header
        -name+          (deprecated) Use the name field and coordinates for the FASTA header
        -nameOnly       Use the name field for the FASTA header
        -split          Given BED12 fmt., extract and concatenate the sequences
                        from the BED "blocks" (e.g., exons)
        -tab            Write output in TAB delimited format.
                        - Default is FASTA format.
        -s              Force strandedness. If the feature occupies the antisense,
                        strand, the sequence will be reverse complemented.
                        - By default, strand information is ignored

= Collect CG density =
# Collect the sequences for each of these regions
bedtools getfasta -fi mm10.fa -bed ChIP_KLF1_mm10_WTLiver_peaks.bed -tab -fo seqs.bed

# collect the number of CGs:
less ChIP_bed_seq.bed   | grep -i CG | perl -ane '$F[1]=~s/g/G/g; $F[1]=~s/c/C/g; my $c = () = $F[1] =~ /CG/g;  $F[0]=~s/[:-]/\t/g; print "$F[0]\t$c\n"' > NumCGs.bed
# ^ read in by line

# if you want density, divide by window size ( assuming it's 100 here)
# Add a c/=100  command to the above like this:
less tmp | grep -i CG | perl -ane '$F[1]=~s/g/G/g; $F[1]=~s/c/C/g; my $c = () = $F[1] =~ /CG/g; $c/=100; $F[0]=~s/[:-]/\t/g; print "$F[0]\t$c\n"' >w100_s20_CpG_density.bed



= intersect  =

bedtools intersect -wa -u -a a.bed -b b.bed
#                       ^ once
#                   ^ exact a

= namecheck =

# fix this warning:
***** WARNING: File left.bed has inconsistent naming convention for record:
chr1 3216958 3216960 JUNC00000001 1 -
# with this option:

-nonamecheck
