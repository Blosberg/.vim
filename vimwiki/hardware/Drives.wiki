= Collect info: =
# The most succinct way to list all the drives on your system:
lsblk | grep disk
# ^ without the "grep", you should see all the partitions already in place on each drive
# e.g. like this:
sda           8:0    0   3.7T  0 disk
└─sda1        8:1    0   3.7T  0 part /mnt/sda1


# Find out the location of your drive
#
$ lsblk

# or:
Look up drives and mount points with:
sudo fdisk -l


# check drive label numbers with:
    sudo efibootmgr
# set boot order with:
    sudo efibootmgr -o 0,1,2,etc


# The “blkid” command can be used to display available drives in Linux in the manner shown below:
# (also provides PART ID and label)
blkid

# Get info for a specific drive:
sudo hdparm -I /dev/sdb

= Setting up new disk =
== Create new partition ==

# Let's say you've identified a new drive on sdb above and want to format it:
# launch fdisk utility

sudo fdisk /dev/sdb
# and follow commands. However, you will not be able to create partitions greater than 2 TB

# If you want something greater than 2TB, use parted:
sudo parted /dev/sdb
GNU Parted 3.3
Using /dev/sdb
Welcome to GNU Parted! Type 'help' to view a list of commands.

# alternatively, just type sudo parted, and then:
(parted) select /dev/sdb

# Type ‘print all’ to see all the drives and their partition Information.
# Select the drive to format and create new partitions. Type the ‘select’ command with the drive path.
# Create a fresh GPT partition table by typing ‘mklabel gpt’ command. You will get a warning to wipe out all your drive. Type ‘yes’ to continue. Please bear in mind, that it’s just a partition table, not the partitions.
mklabel gpt

(parted) mklabel gpt
(parted) print
Model: ATA ST8000NM000A-2KE (scsi)
Disk /dev/sdb: 8002GB
Sector size (logical/physical): 512B/4096B
Partition Table: gpt
Disk Flags:

Number  Start  End  Size  File system  Name  Flags

# now create a ext4 partition that will take up the whole drive:
(parted) mkpart primary 0% 100%
# and quit:
(parted) q

== format this new partition: ==

sudo mkfs -t ext4 /dev/sdb1
# # output:
# mke2fs 1.45.5 (07-Jan-2020)
# Creating filesystem with 1953506304 4k blocks and 244191232 inodes
# Filesystem UUID: e49098ce-cc76-4bfd-b3ae-b315bbdf8cc2
# Superblock backups stored on blocks:
# 	32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,
# 	4096000, 7962624, 11239424, 20480000, 23887872, 71663616, 78675968,
# 	102400000, 214990848, 512000000, 550731776, 644972544, 1934917632
#
# Allocating group tables: done
# Writing inode tables: done
# Creating journal (262144 blocks):
# done
# Writing superblocks and filesystem accounting information: done

== Mount/unmount  ==

# (in this e.g. lets say the above indicates sda2)
#
# mount a drive to a given folder (provided that folder already exists):
sudo mount -t auto -o rw /dev/sda2 /media/old_HD_internal

# then add write permissions:
sudo mount -o remount,rw  /dev/sda2 /media/old_HD_internal

# unmount:
sudo umount /dev/sda2

# additional options:
$ sudo   mount -t vfat /dev/sdb1 /media/boon/SSD2_FAT32/ -o rw,uid=1000,gid=1000

# N.B. For HFS file systems, you need to disable journaling from a mac to allow ubuntu to write to it (otherwise it's read-only for ubuntu):
$ sudo diskutil disableJournal

# to find whether an installed disk is SSD or normal HDD, just check if the disk is rotational using the following command:
$ cat /sys/block/sda/queue/rotational

If the output is 1, the disk is HDD. If the output is 0 (zero), the disk is SDD. Because, SSDs won't rotate. So the output should be zero if you have SSD in your system.

== Persistent (permanent, fixed) mount point: ==

add  partitions to /etc/fstab by collection PARTUUID or UUID  value of the partitions/drive
$ sudo blkid

# then:
vim /etc/fstab/
add the partition information in the /etc/fstab. You can add the two lines representing each line for a partition. Write this information separated by TAB.

PARTUUID=VALUE	/mount/path/	ext4	default	0	0
#^ or: UUID=...




= disk usage =

get the amount of disk space taken up by the contents of the current directory.

$ du -h  --max-depth=1
#     ^ human readable
#        ^ go down 1 dir

== Relabel drives ==
#Relabel the veracrypt link names:

$ sudo exfatlabel /dev/mapper/veracrypt1 VC1

See: https://sourceforge.net/p/veracrypt/discussion/general/thread/e24a7247/



= Repair drives =
# To repair bad superblocks on the drive.

$fsck /dev/sda1 (replace /dev/sda1 with the drive you want to fix).


= secure deletion  =

https://code.mendhak.com/securely-wipe-ssd/

sudo apt install hdparm
# hdparm allows you to work with ATA disks and the ATA disk’s built in commands

sudo hdparm --user-master u --security-set-pass hunter2 /dev/sdX
sudo hdparm --user-master u --security-erase-enhanced hunter2 /dev/sdX

== write zeros to drive sdX (good for secure erase)  ==
sudo dd if=/dev/zero of=/dev/sdX bs=1M status=progress






