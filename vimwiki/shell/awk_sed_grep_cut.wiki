
= awk =

# set input field separator:
awk -F 'gene_name' '{print $2 }' NFZ.gtf   | uniq  | sed 's/;$//' | sed 's/"\(.*\)"/\1/' > genes_uniq.tsv


# set output field-separator to "\t"
awk -v 'OFS=\t' '{print $1, "0", $2}' chromSizes.txt |...
# alternatively:
awk 'OFS="\t" { ...

#---to print columns 1,2,3 from filename
 awk '{ print $1, $2, $3 }' filename.txt


# DON'T print columns 6,8; print everything else:
awk '{$6=$8=""; print $0}' file


# rounding:
awk ' {printf "%s\t%d\t%d\t%d\t%.f\n", $1,$2,$3,$5,$5*$4}'

   == Check number of columns ==

awk -F"\t" '{print NF;exit}'  DZ11.AT.methyCalling.bed
             #         ^ n.b. the exit makes you just look at the first line

   == Conditionally print lines ==

awk -v mincov="${MinCov}" -v maxcov="${MaxCov}" '($5+$6)>=mincov && ($5+$6)<=maxcov'  ${fbed_in} > out

   == format output  if/else logic ==
awk -v minD="${MinD}" -v maxP="${MaxPval}" \
           '{ if ( $5<maxP &&  $6>minD ) printf "%s\t%d\t%d\t%.4g\t%.4g\n", $1, $2, $2+2, $5, $6} '       ${ufile_in} >  ${Sigdiff_pos_out}
awk '{printf "%s:%d-%d", $1,$2+1,$3}{ for(i=4; i<=NF; i++){ printf "\t%s",$i}; print ""}'  in.bed >  out.tsv


   == sum/average a column ==

# sum
awk '{s+=$3}END{print s}' file

# mean
awk '{s+=$3}END{print s/NR}' file

# mean of multiple cols
awk '{ for (i = 1; i <= NF; i++){ sum[i-1]=sum[i-1]+$i } END  { for (i = 1; i <= NF; i++){ printf "%g\t", vals[i-1]/NR}'

# take sum and average of values in a column:
ColSum() {
   # Check that there is only 1 input arg:
   if [ $# -ne 2 ]; then
     echo "HALT: ColSum takes two arguments: input file and column number"
   else
     fin=$1
     col=$2
     awk -v c="${col}"  '{s+=$c}END{print s}' $fin
   fi
}

ColMean() {
   # Check that there is only 1 input arg:
   if [ $# -ne 2 ]; then
     echo "HALT: ColAvg takes two arguments: input file and column number"
   else
     fin=$1
     col=$2
     awk -v c="${col}"  '{s+=$c}END{print s/NR}' $fin
   fi
}


   == sum/average rows ==
awk '{sum=0; for(i=1; i<=NF; i++){sum+=$i}; sum/=NF; print sum}' file

# --- ( or then select whichever columns you want)


   == merge columns of separate files: ==
pr -m -t -s\  test1 test2

   == Worked examples: ==

> cat file1
one two three
one two three
one two three
one two three

> cat file2
four five six
four five six
four five six
four five six

> pr -m -t -s\  file1 file2 | gawk '{print $4,$5,$6,$1}'
four five six one
four five six one
four five six one
four five six one

   == PRINT 'i'TH COLUMN---------: ==

awk '{print $'$i'}' file

   == delete 'i'th column ==

awk '!($3="")' file

= sed =

  == substitute ==
sed 's/old/new/[flag]'

 see manual:  https://www.gnu.org/software/sed/manual/html_node/The-_0022s_0022-Command.html

# if either old or new contains the "/" character, you can use any delimiter (including control characters):
sed "s~old~new~g" ${str}
or
sed "sAoldAnewA" ${str}


  == modify files in place ==
  # sed -i is fine for unix systems, but for OSX you need some prefix nonsense:
  sed -i '' -e  '1s/range/Ranges/' UnionMF_samples_CpG_NFZv2IuN+NORv2ps_10-150X_NoNA.tsv

  == file lists  ==

# check for individual subject pseudonyms in a paired-end database
ls *.fq.gz  | sed "s/_.\.fq\.gz//g" | uniq  | wc -l

   == extract substring ==
echo $test
merged_fastq/mpimg_L17771-1_AM-DNA-083_mrg_R1_001.fastq.gz
echo  $test | sed "s/.*\(AM-DNA-...\).*/\1/"
AM-DNA-083

   == print (sub)set of lines ==

sed -n '4,6p' FILE_1234.txt

# e.g.
sed -n '3,18p;6q' FILE_1234.txt
# WOULD print lines 3-18 (because "3,18p", but stops before line 6 because of "6q")

   == operate on just a range of the file (but still print the whole thing) ==

# e.g. swap spaces with underscores from line 2 onwards (but keep spaces in line 1)
sed  '2,$s/ /_/g' jam_1
#     ^range


   == capture in buffer and pass it on with \1, \2 (note the \ to escape {} ==
sed 's/\(AM-WGBS-[0-9]\{3\}\).*:All/\1/' readstats.tsv > temp  && mv temp readstats.tsv



= grep =

# take only lines with chr[1-9] (1 or 2 digits), M, X, Y

grep -E '^(^chr[0-9]{1,2}\s|chrM\s|^chrX\s|^chrY\s)' chrTestSet.bed

# show which line number
grep -n "" <file>

= cut =

cut -f[n] -d"[x]"
assumes your string is limited by characters "X", and you want to extract field n from it.

# or cut "from fields 4 onward", e.g.:
head -1 Union_cov.bed | cut -d "    "  -f4-
#                               ^ ctrl-V tab

$echo "THIS_IS_A_STRING_OF_CHARACTERS " | cut -f1 -d"_"


$ echo "THIS_IS_A_STRING_OF_CHARACTERS " | cut -f1 -d"_"
THIS
[USER]  $ echo "THIS_IS_A_STRING_OF_CHARACTERS " | cut -f2 -d"_"
IS
[USER]  $ echo "THIS_IS_A_STRING_OF_CHARACTERS " | cut -f4 -d"_"
STRING
[USER]  $ echo "THIS_IS_A_STRING_OF_CHARACTERS " | cut -f4 -d"S"
TRING_OF_CHARACTER
[USER]  $ echo "THIS_IS_A_STRING_OF_CHARACTERS " | cut -f1 -d"S"
THI
[USER]  $ echo "THIS_IS_A_STRING_OF_CHARACTERS " | cut -f2 -d"S"
