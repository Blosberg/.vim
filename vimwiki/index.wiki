Brendans vimwiki:

== Disclaimer ==

This is a personal repo where I occasionally make notes to avoid searching
online repeatedly. The notes are in my own messy shorthand, and while you're
free to use them, I make no promises as to their legibility and assume no
liability with respect to their accuracy. If you'd like to combine wiki's get
in touch and we can see if our note-taking styles are compatible.
Use at your own risk.

= Notes:  =

= shell/bash + packaging =

    * [[shell/top|]](h)top -- top and htop to view processes
# to see what shell you're using:
echo $0
   * [[shell/users|manage_users]] -- add/remove users, create home directories

# Strange characters appear in terminal when you click with mouse? this is because of [[https://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-Mouse-Tracking|mouse tracking mode]]  Enter command "reset"

    * [[shell/conda|conda]] -- Conda: manage environments, recipes.
    * [[shell/cron|cron]]

    * [[shell/shell_variables|shell_variables]] -- string subsets, length, basename, dirname of filepaths partial subsets with #, %
    * [[shell/shell_scripting|shell_scripting]] -- parse command line args for shell scripts; if/else, control flow; compare files; check if file exists
    * [[shell/random|random]] -- RND number generator, shuffle files shuffle arrays
    * [[shell/Linux_info|Linux_info]]     -- lsb_release, free, distro info,
    * [[shell/command_line|active command_line]] -- move back and forth, delete text while typing, clear current output
    * [[shell/Profile|Profile]] -- change look/colorscheme/etc. of terminal
        - [[shell/prompt_values|prompt_values]] --PS1, PS2, etc. the characters that appear before the "$" prompt on terminal
    * [[shell/awk_sed_grep_cut|awk_sed_grep_cut]] -- one-liners sum column
    * [[shell/paste|paste]] --invert tables, paste columns join
    * [[shell/find|find]] -- find files
    * [[shell/sort|sort]]  -- sort files by column -k options, etc.
    * [[shell/wc|wc]] -- count line numbers/ char numbers
    * [[shell/batch_rename|batch_rename]] -- change the names of multiple files/folders
    * [[shell/Parameter_expansion|Parameter_expansion]]: variable referencing, indirect referencing, etc.
    * [[shell/tmux|tmux]]

= Atom =
 command palette: cmd+Shift+P
= vim =

# restarting from a crash:

# From terminal:
git clone https://github.com/k-takata/minpac.git ~/.vim/pack/minpac/opt/minpac

# From vim
: packadd minpac
: call minpac#init()
# " minpac must have {'type': 'opt'} so that it can be loaded with `packadd`.
: call minpac#add('k-takata/minpac', {'type': 'opt'})
: call minpac#update()
# To get minpac. 
# then exit, restart, and
: call minpac#update()
# again, to get the rest of your packages specified in your .vimrc

Mon 25 Jan 2021 10:56:52 CET (date stamp inserted with :r !date )
    * [[vim/starting|starting]] -- start at line#/Regex; pipe from stdin
    * [[vim/movements|movements]]
    * [[vim/vimdiff|vimdiff]]
    * [[vim/tabs|tabs]]    -- open and navigate tabs in vim
    * [[vim/File_management |File_management]] -- open files from tabs, gf <C-W>f, get file extensions, paths, etc. write selection to file
    * [[vim/conceal|conceal]] -- show or hide special characters in, e.g. markdown --e.g. make the $ characters visible

    == Batch operations ==
    * [[vim/macros|macros]]
    * [[vim/g_command|g_command]] -- global commands like g/pattern/command
    * [[vim/Mappings|Mappings]]
    * [[vim/search_and_replace|search_and_replace]]
    * [[vim/Incrementing|Incrementing]] -- numbers +/-

    == Patterns ==
    * [[vim/syntax|syntax]]  -- file-type dependent syntax recognition
    * [[vim/spellcheck|spellcheck]]
    * [[vim/Expression_Register|Expression_Register]]
    * [[vim/Autocomplete|Autocomplete]]

    == plugins ==
    * [[vim/minpac|minpac]] -- plugin to manage plugins: packadd update

    * [[vim/fugitive|fugitive]]
    * [[vim/gitgutter|gitgutter]]

= Programming =
    * https://www.codecademy.com/
 = Other Editors =
         * [[Coding/VScode|VScode]]
 = c++ =
         * [[c++/vectors|vectors]] -- cheat sheet for vectors in c++
         * [[c++/classes|classes]] -- define/derive classes, syntax
         * [[c++/switch|switch]] -- switch statement
         * [[Resource_management/valgrind|valgrind]] -- profile your c++ code

    = R =

         === managing environment ===

         * If you encounter errors like:
	     1: Setting LC_CTYPE failed, using "C"
             2: Setting LC_COLLATE failed, using "C"
             3: Setting LC_TIME failed, using "C"
             4: Setting LC_MESSAGES failed, using "C"
             5: Setting LC_MONETARY failed, using "C"

            - Then add the following to your .bash_profile
	export LC_ALL=en_US.UTF-8
	export LANG=en_US.UTF-8
	    - to set the "locale". (This should be happening automatically in .Renviron, but sometimes isn't for reasons I haven't figured out)

         * .libPaths() # tells you where packages are saved to and accessed.
         * install specific versions with:
               install.packages("devtools")
               devtools::install_github("PhanstielLab/bedtoolsr@v2.29.0-3")

        * set proxy
	* Sys.setenv(http_proxy="http://proxy.charite.de:8080") #nolint
	* Sys.setenv(https_proxy="http://proxy.charite.de:8080") #nolint

         === updating/ installing R ===
         https://cran.r-project.org/
         recommends:

         Run these lines (as root or by prefixing sudo) to tell Ubuntu about the R binaries at CRAN.

         # update indices
         apt update -qq
         # install two helper packages we need
         apt install --no-install-recommends software-properties-common dirmngr
         # add the signing key (by Michael Rutter) for these repos
         # To verify key, run gpg --show-keys /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc
         # Fingerprint: 298A3A825C0D65DFD57CBB651716619E084DAB9
         wget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc
         # add the R 4.0 repo from CRAN -- adjust 'focal' to 'groovy' or 'bionic' as needed
         add-apt-repository "deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/"

         Here we use lsb_release -cs to access which Ubuntu flavor you run: one of “impish”, “hirsute”, “focal”, “bionic”, …

         Then run

         apt install --no-install-recommends r-base

         # installing packages from source
         install.packages(pkgname.tar.gz, repos = NULL, type =‘‘source’’)

         = programming in R =

	 * [[R_language/CommandLineArgs|Command_line_args]] -- command line arguments for Rscripts
         * [[R_language/Env_files|Env_files]] save and load image files of RData for the working space.
	 * [[R_language/IOreadWrite|IO_Read/write]] -- read/write files, csvs etc. create directories, paths
         * [[R_language/logicals|logicals]] ifelse, any, all
         * [[R_language/eval|eval]]       -- evaluate strings as expressions
	 * [[R_language/strings|Rstrings]] -- gsub string replace
         * [[R_language/sorting|sorting]] -- sort, rank, order, etc.
         * [[R_language/dataframes|dataframes]]   -- dplyer, filter, select, mutate, boxplot,  table unique values (how many of each)
         * [[R_language/plotting|plotting]] -- hist, heatmap, trendline, title, multiple plots mf par
         * [[R_language/apply|apply]] -- sweep-like operations on extended datasets lapply, sapply, mapply, etc.
         * [[R_language/prcomp|prcomp]]   -- the usual principle-components script (pca/PCA)
         * [[R_language/plotting|plotting]] -- smoothScatter, regular plot, histograms, transparent,  options, ideogram
         * [[R_language/split|split]] -- split arrays into lists of arrays
	 * [[R_language/tidyverse|tidyverse]] --ggplot, %>% commands, notes from MolMed course

         == Bioconductor  ==
             if (!require("BiocManager", quietly = TRUE))
                 install.packages("BiocManager")
             BiocManager::install(c("GenomicFeatures", "AnnotationDbi"))

	 * [[R_language/GRanges|GRanges]] -- setdiff, GRL_ overlaps, etc., sort order
	 * [[R_language/biostrings|biostrings]] --biostrings, read in and inspect reference genomes read fasta.

    = python =
    Ternary op:
      Y = trueValue if cond else falseValue
      Z = (falseValue,trueValue)[cond]
    [[python/recursion|recursion_ex]] -- a few exercises in recursion

         == tutorials ==
         - https://docs.python.org/
         - www.learnpython.org

         == System interface: venv, pip, FILE I/O ==
         id(var)  returns the location of a data

	 # list directory contents:
	 from os import walk
	 filenames = next(walk(FisherDir), (None, None, []))[2]
         #                                                   ^
	 # 0--> absolute path;  1--> subdirectories

         - [[python/venv|venv]] --Virtual environment management
         - [[python/pip|pip]] pip package management
         - [[python/FILE_access|FILE_I/O]] -- reading/writing, csv files, with ... as, os.walk, isdir, isfile, os.list etc.
         - [[python/jupyter|jupyter_notebooks]] -- starting/stopping sessions

         == Packages: numpy, pandas, matplotlib, pdb ==
         - [[python/import_exec|import_exec]]: sourcing, importing, etc.
         - [[python/numpy|numpy]]
         - [[python/random|random]]
         - [[python/pandas|pandas]] -- tidy rearrange melt --regression on columns
	 == visualizaiont, plotting: pca, matplotlib ==
         - [[python/PCA|PCA]] : principle components in python pca
         - [[python/matplotlib|matplotlib]] : plot examples: beeswarm, 3d, histogram, Dendrogram (hierarchical clustering), heatmap, Venn

         == structs and functions: Classes, functions  datetime ==
         - [[python/functions|functions]]
         - [[python/Classes|Classes]]
         - [[python/datetime|datetime]]

         == Containers: strings, dicts, lists, sets  ==
         - [[python/strings|strings]] --split with regex
         - [[python/dictionaries|dictionaries]]
         - [[python/Generators|Generators]]
         - [[python/Lists|Lists]] -- basic syntax and implementation; list comprehensions
         - [[python/Sets|Sets]] --intersection, difference, union, overlap
	 - [[python/zip|zip]]
         - [[python/batch_operations|batch_operations]] --map,filter,reduce; operations

         == Debugging: pdb, Exceptions, testing ==
         - [[python/pdb|pdb]]:           -- debugger for python

         - [[python/Exceptions|Exceptions]]

         = python database API =

		https://peps.python.org/pep-0249/

		for postgress:
		[[python/pySQL/psycopg2|psycopg2]]

	 - [[python/sql_api|sql_api]]
	 - connection = connect( parameters )
	 - connection.commit()
	 - connection.rollback()
	 - connection.close()

    * [[python/psycopg2|psycopg2]]  -- sql with python via psycopg2
    * [[python/sqlalchemy|sqlalchemy]]  -- sql with python via sqlalchemy
    = Snakemake =

    --reason
    --debug-dag

         * [[Snakemake/Snakemake_inputLists|SM_inputLists]] -- trace over inputs with wildcards that reference some dict.
	 * [[Snakemake/debug|debug]] -- debug-dag, reason, etc Tracer()()
	 * [[Snakemake/SM_regex|SM_regex]]
    = CSS =
    * - [[css/External|]]
    * - internal
    * - inline

    = SQL/sql =

    * [[sql/sqLite_Essential_LinkedIn|sqlIntro]] -- some notes may be specific to SQLite; from linkedIn Learning coarse
    * [[sql/postgres|postgres]] -- Notes specific to postgres; restore, backup, interactive sessions, connect.


= Data Science, Machine/Statistical Learning, regression, stats, =

    * [[ML/data_sets|data_sets]]

   == Naive Bayes Classifier ==
    * [[DataScience/Naive_Bayes|NaiveBayes]]

   == Dimensionality reduction ==

    * [[DataScience/t-SNE|t-SNE]]

    * [[DataScience/umap|umap]]

   == Regression, classification ==
    * [[python/OLS_regression|OLS_regression]]

   == Classification ==

    * [[python/Logistic_regression|Logistic_Regression]]
    * [[python/Random_Forest|Random_Forest]]
    * [[ML/SGD_classifier|SGD_classifier]]--
    * [[ML/Linear_SVM|Linear_SVM]] -- define a plane separating two types

   == (Neural) Networks ==
    * [[python/Networks|Networks]]

    * [[ML/Max_pooling|Max_pooling]]
    * [[ML/Convolution|Convolution]]
    * [[ML/Flattening|Flattening]]
    * [[ML/Dropout|Dropout]]
   == tensorflow ==
     [To be filled in...]
   == pytorch ==
    https://pytorch.org/docs/stable/nn.html#torch.nn
     * [[ML/pytorch/Tensors|Tensors]]
     * [[ML/pytorch/ModelDeclaration|Model_declaration]]
     * [[ML/pytorch/Loss|Loss]]

= Math and stats =
    * [[math_stats/Precision_recall|precision_recall]]
    * [[math_stats/PCA_SVG|PCA_SVG]]
    * [[math_stats/Anova|Anova]] --analysis of variance, two-way anova, F-test, F-ratio,Tukey test
    * [[math_stats/FDR|FDR]]
    * [[math_stats/survival|survival]] -- kaplan meier cox proportional hazards

= Regex =
        -- regular expressions --
    * [[Regex/Tutorials|Tutorials]]
    * [[Regex/Wildcards|Wildcards_and_quantifiers]] --wildcards, quantifiers, + * . ?
    * [[Regex/Regex_Quantifiers|Regex_Quantifiers]] --
    * [[Regex/Greedy_vs_lazy|Greedy_vs_lazy]]
    * [[Regex/Lookarounds|Lookarounds]]

= Resource_management (hardware/networking/cluster), system=OSX/windows/linux/raspberry pi =

  == OSX ==
    * [[OSX/shortcut_keys|shortcut_keys]]
    * [[OSX/booting|booting_OSX]]
    * [[OSX/automator|automator]]

  == Windows ==

    * [[windows/wsl|wsl(2)]]

  == Ubuntu ==

how to reset the compiz settings (in case you bork them):
$ dconf reset -f /org/compiz/

    * [[ubuntu/boot|booting_ubuntu]]

  == Raspberry pi raspi ==

    * [[raspbi/pihole|pihole]]

  == Networking hosting; domain email osberg.eu  ==
    * [[raspbi/raspbiConnect|raspbiConnect]]  -- ssh hosting, connections; https certificates; ufw firewall; port forwarding; DDNS; DHCP
    * [[raspbi/nextcloud|nextcloud]]  ---  Raspberry pi raspi

    * [[Network/EmailHosting|Email_hosting]] --- DNS records; Tutanota, set mail host

    * [[Network/Fritzbox|Fritzbox]]

    == Hardware ==

    * [[hardware/Drives|hard drive info]] Hard drive disk management; create partitions w/ parted; mount/ unmount, set persistent mount points via fstab; relabel veracrypt drives; repair bad drives
    * [[Resource_management/fileformats|File_formats]] -- Tradeoffs between file formatting standards (OS-compatibility, Size limits, etc.)
    * [[Resource_management/Veracrypt|Veracrypt]]
    * [[Resource_management/Filesharing|Filesharing]]

    * [[Resource_management/guix|guix]] -- how to manage environments+manifests, etc.
    * [[Resource_management/dmesg|dmesg]] -- Get info about a task submitted on a local machine (without SGE queueing), find out why it died, etc.
    * [[Resource_management/Audio|audio]] -- Audio sound card settings microphone issue distortion sound.

    = Cluster =
        - [[Resource_management/SGE_submission|SGE_submission]]  -- example script
        - [[Resource_management/check_cluster_status|check_cluster_status]]

= privacy =
    * [[privacy/encfs|encfs]] -- set up the vault
    * [[privacy/othertips|othertips]] -- spooky shit
    * [[privacy/PGP|PGP]]       -- how to use pgp

= git =
    * [[git/setup|setup]] -- settings, config, etc.
    * [[git/inspect|inspect]] -- review and tidy up repo. blame, diff, log, bisect, clean etc.

    * [[git/tokens|tokens]]

    * [[git/preset_changes|preset_changes]] -- create and apply diff files, patches, cherry pick commits
    * [[git/committing|committing]] -- unstage, interactive staging, reverting...
        * [[git/commit_tree|commit_tree]] --navigate tree of commits: check history, branching, merging, rebase, reset
    * [[git/sharing|sharing]] --pushing and pulling with remotes; sending patches, diffs, etc.
    * [[git/stash|stash]]
    * [[git/tags|tags]]

    * [[git/Tutorials|Tutorials]]
    * [[git/fugitive|fugitive]]


= Bioinformatics =

    Tutorials:
    * [[https://github.com/sib-swiss/training-collection|Swiss SIB training collection]]
    * [[https://statquest.org/video-index/|Statquest]]

    Other notes:
    * [[BioInfo/fasta|fasta]] -- formatting fasta, line length (to add: indexing)
    * [[BioInfo/ranges_exons|ranges_exons]] -- download ranges like exons/introns/etc. from ucsc
    * [[BioInfo/EnsemblIDs|EnsemblIDs]]
    * [[BioInfo/gtf|gtf_files]] -- convert gtf files to bed
    * [[BioInfo/bedtools|bedtools]] -- map and manipulate bedfiles onto each other; make windows,
    * [[BioInfo/metilene|metilene]]
    * http://rosalind.info/problems/locations/
    * [[BioInfo/Datasets|Datasets]]
    * [[BioInfo/Experiment_types|Experiment_types]] -- e.g. Cut_n_run
    * [[BioInfo/pyranges|pyranges]]
    * [[BioInfo/Galaxy|Galaxy]]

= Job specific =

* [[Charite/bih_cluster|bih]]
