
= String manipulation =
# Take subsets of a string
$var="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
$echo $var
ABCDEFGHIJKLMNOPQRSTUVWXYZ
$echo ${var:4}
EFGHIJKLMNOPQRSTUVWXYZ
$echo ${var:4:7}
EFGHIJK
$echo ${var:4:3}
EFG

= Remove parts of string with matching globs using # % (from start/end) =
# means match from the beginning (think of a comment line) and % means from the end. One instance means shortest and two instances means longest.
# 

$string="a_b_c_d_e"
${MYVAR%pattern}     # delete shortest match of pattern from the end
$echo ${string%_*}
a_b_c_d

${MYVAR%%pattern}    # delete longest match of pattern from the end
$echo ${string%%_*}
a

${MYVAR#pattern}     # delete shortest match of pattern from the beginning
$echo ${string#_*}
a_b_c_d_e
# ^ doesn't work because needs matching _start. That's why you need * glob

$echo ${string##_*}
a_b_c_d_e
$echo ${string##*_}
e

${MYVAR##pattern}    # delete longest match of pattern from the beginning
$echo ${string#*_}

You can get substrings based on position using numbers:

${MYVAR:3}   # Remove the first three chars (leaving 4..end)
${MYVAR::3}  # Return the first three characters
${MYVAR:3:5} # The next five characters after removing the first 3 (chars 4-9)



= Get length of string=
$echo ${#var}
26

= Number of words or entries in a variable =

input="Count from this String   "
words=( $input )
echo ${#words[@]}
4


N.b. you need the extra parenthesis here (to set it as an array?)

var=( $( ls files_matching_pattern* ) )
#   ^                                 ^
#   otherwise ${#var[@]} will always be 1

= string var substitution =

# To replace the first occurrence of a pattern with a given string, use
# ${parameter/pattern/string}:

#!/bin/bash
firstString="I love Suzi and Marry"
secondString="Sara"
echo "${firstString/Suzi/$secondString}"
# prints 'I love Sara and Marry'
To replace all occurrences, use ${parameter//pattern/string}:

= basename dirname =

# tools to  extract path components:

$ export VAR='/home/pax/file.c'
$ echo "$(dirname "${VAR}")" ; echo "$(basename "${VAR}")"
/home/pax
file.c

= options =

-f ...
-z string True if the string is null (an empty string)

