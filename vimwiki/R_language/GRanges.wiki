https://bioconductor.org/packages/release/bioc/vignettes/GenomicRanges/inst/doc/GenomicRangesIntroduction.html


seqdat_temp = read.csv(seqlengths_path, sep="\t", header=FALSE)
Sinfo <- Seqinfo(seqnames   = as.character(seqdat_temp[,1]),
                 seqlengths = seqdat_temp[,2],
                 genome     = assembly)

seqlevels( gtf_raw_Grz )
ChromSizesPath="/Users/bosberg/Desktop/Science/2020_postdoc_MPIMG/data/Killifish/reference/NFZv2IuN.chrom.sizes"
seqdat_temp = read.csv( ChromSizesPath,
                        sep="\t",
                        header=FALSE)
Sinfo <- Seqinfo(seqnames   = as.character(seqdat_temp[,1]),
                 seqlengths = seqdat_temp[,2],
                 genome     = "NFZv2IuN")

gtf_raw_Grz   <- import.gff( gtf_path_Grz )
seqlevels( gtf_raw_Grz ) <- seqlevels(Sinfo)
# ensure the full set of seqnames
# from the ref-genome are included
# (even if this data set is low-
# coverage and missing chrom's)



G1            <- as(m1 , "GRanges")            # convert it to a GRanges object

seqlevels(G1) <- seqlevels(Sinfo)              # ensure the full set of seqnames
                                               # from the ref-genome are included
                                               # (even if this data set is low-
                                               # coverage and missing chrom's)





= read/write from bed =

BiocManager::install("plyranges")
library(plyranges)

tmp =readr::read_tsv( AllsampU_CT ) %>% plyranges::as_granges()

CT_profile = Average_mcols ( tmp )

df_out = as.data.frame( CT_profile )
df_out$width=NULL
df_out$strand=NULL

# rtracklayer::export.bed( CT_profile, con=CT_ProFile_out )
readr::write_tsv( df_out, na="NA", path=CT_ProFile_out )

https://rdrr.io/bioc/rtracklayer/man/export.html
rtracklayer::import(con, format, text, ...)



read_bed_to_GR   <- function ( FilePath=stop("must be provided"),
                               HeaderBool=TRUE
)
{
  tmp_table = read.table( FilePath, header = HeaderBool )
  if( HeaderBool){
    if( ! all( colnames( tmp_table )[1:3] == c("chr", "start", "end") ) ){
      stop("ERROR:header supplied, but is not valid.")
    }
  }
  else {
    colnames( tmp_table )[1:3]=c("chr", "start", "end")
    if( dim( tmp_table)[2] >= 6 ){
      # is there a 6th col?
      if( all( tmp_table[,6] %in% c("+","-","*") ) ){
        # all entries in 6th col are valid strand indicators, make this the "strand"
        colnames( tmp_table )[6] = "strand"
      }
    }
  }

  result = as( tmp_table, "GRanges")
  start( result ) = start( result ) + 1

  return (result)
}

= Order =

# Order is defined by whatever seqlevel comes first, so initialize with proper seqlevels:
gr=GRanges()
seqlevels( gr ) <- unlist( lapply( c(1:22, "X", "Y", "M"), function(x) paste0( "chr", as.character(x)) ) )

# and then add more with:

gr = sort( c( gr, new_additional_gr) )
and make sure that the original always comes first



= setdiff =
addenda = setdiff( gr_add, prev_rgs )
#
# prev_rgs             |==========|          |========|  |====|
# gr_add                   |==========================================|
#
# addenda                         |==========|        |==|    |=======|


getOverlaps(a,b)     --> indices
getOverlapPairs(a,b) --> GRobjects themselves.

= Subtract =
# subtract ranges but don't reduce them
GRanges_subtract <- function( gr1, gr2 )
{
  # Subtract GRange object gr2 from gr1, but unlike setdiff
  # preserve individual  ranges in gr1
  df_1 = data.frame( seqnames=seqnames(gr1), start=start(gr1)-1, end=end(gr1), strand=strand(gr1), mcols( gr1 ) )
  df_2 = data.frame( seqnames=seqnames(gr2), start=start(gr2)-1, end=end(gr2), strand=strand(gr2), mcols( gr2 ) )
  #                                                          ^ -1 --> convert to base-0 start for bedtools

  result = bedtoolsr::bt.subtract(df_1, df_2)

  if ( length(result)==0 ){
    # subtraction has left nothing remaining. Return empty GRanges obj.
    return( GRanges() )
  } else {

    colnames( result ) = colnames( df_1 )
    result$start=result$start+1
    #                        ^ reset to base-1 notation consistent with GRanges

    return ( GRanges( result ) )
  }

}
= Map mcol data onto ranges =

# Do what "map" for bed tools does, but for GRanges
# Absolutely not optimized; come back to this later

Map_to_ranges <- function( Ranges_in, observable_in )
{
  # Input = 2 sets of GRanges
  # map all mcols from observable to Ranges_in
  if ( dim( mcols( observable_in ) )[2] == 0  ){
    stop("Sanity Fail: no mcols to average over in observable")
  }

  Olaps = findOverlaps( Ranges_in, observable_in )
  # GRL_tmp = split( observable_in[ subjectHits( Olaps ) ], queryHits ( Olaps )  )
  # ^ a more elegant solution is probably possible with lapply, but I
  # can't get the table formatted properly.

  Npeaks = length( Ranges_in )
  Nsamples = dim( mcols( observable_in ) )[2]

  MapResult_out=data.frame(matrix(0, Npeaks, Nsamples ) )
  colnames( MapResult_out ) <- colnames( mcols( observable_in ) )

  for ( i in c(1:Npeaks)){
    olaps_this_peak   = subjectHits( Olaps[ queryHits( Olaps ) == i  ] )
    if( length( olaps_this_peak ) == 0 ){
      MapResult_out[i,] = NA
    } else{
      MapResult_out[i,] = colMeans( data.frame( mcols( observable_in[ subjectHits( Olaps[ queryHits( Olaps ) == i  ] ) ] ) ) , na.rm = TRUE )
    }
  }

  return ( MapResult_out )
}

